{"version":3,"sources":["firebase.js","atoms.js","components/PostIt.js","components/ColorPalette.js","components/PostItModal.js","routes/Home.js","routes/Profile.js","routes/Auth.js","components/Navigation.js","AppRouter.js","App.js","index.js"],"names":["authService","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","firestoreDB","getFirestore","writeOpenState","atom","key","default","deleteState","PostItBox","styled","div","props","postObj","color","PostIt","isOwner","useHistory","useRecoilState","setIsDeleted","deletePost","a","deleteDoc","doc","id","prev","console","log","likePost","postDoc","updateDoc","like","date","Date","uploadedAt","getMonth","getDate","getFullYear","style","position","marginBottom","right","border","backgroundColor","onClick","width","contents","top","ColorPalette","className","e","target","$clickedPost","document","querySelector","$clickedPostIt","animate","duration","fill","setTimeout","Overlay","motion","Modal","scrollY","get","PostItModal","userObj","useState","post","setPost","setIsModalOn","onSubmit","preventDefault","$postIt","now","author","uid","addDoc","collection","docRef","value","useViewportScroll","AnimatePresence","opacity","exit","flex","marginTop","cols","rows","onChange","placeholder","maxLength","map","PostGrid","WriteButton","button","ButtonMenu","Home","postArry","setPostArry","isSorted","setIsSorted","isModalOn","useEffect","sortOrder","q","query","orderBy","onSnapshot","snapshot","docArry","docs","elem","data","sort","b","element","Profile","uId","isDeleted","where","marginLeft","fontSize","length","Wrapper","FormDiv","Form","form","Input","input","SubmitButton","GoogleButton","AlterButton","Title","h2","Auth","email","setEmail","password","setPassword","newAccount","setNewAccout","error","setError","useForm","register","handleSubmit","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","onGoogleClick","provider","GoogleAuthProvider","signInWithPopup","result","credential","credentialFromResult","accessToken","user","code","credentialFromError","name","required","type","Nav","nav","LogOutButton","Navigation","history","profileMatch","useRouteMatch","isProfile","to","textDecoration","signOut","push","AppRouter","isLoggedin","basename","exact","path","App","init","setInit","setLoggedin","setUserObj","onAuthStateChanged","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.27463a1c.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n\tapiKey: process.env.REACT_APP_API_KEY,\n\tauthDomain: process.env.REACT_APP_AUTH_DOMAIN,\n\tprojectId: process.env.REACT_APP_PROJECT_ID,\n\tstorageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n\tmessagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n\tappId: process.env.REACT_APP_APP_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\n\nexport const authService = getAuth();\nexport const firestoreDB = getFirestore();\n","import { atom } from \"recoil\";\n\nexport const writeOpenState = atom({\n  key: \"writeOpenState\",\n  default: false,\n});\n\nexport const deleteState = atom({\n  key: \"deleteState\",\n  default: false,\n});\n","import React, { useState, useEffect } from \"react\";\nimport { firestoreDB } from \"firebase\";\nimport { collection, deleteDoc, doc, updateDoc } from \"@firebase/firestore\";\nimport styled from \"styled-components\";\nimport { useRecoilState } from \"recoil\";\nimport { deleteState } from \"atoms\";\nimport { useHistory } from \"react-router-dom\";\n\nconst PostItBox = styled.div`\n  position: relative;\n  word-wrap: \"break-word\";\n  background-color: ${(props) => props.postObj.color};\n  box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;\n  /* border: \"none\"; */\n  border-radius: 10px;\n  padding: 10px;\n  margin: 30px;\n  outline-style: none;\n  resize: none;\n  width: 250px;\n  height: 150px;\n`;\n\nconst PostIt = ({ postObj, isOwner }) => {\n  const history = useHistory();\n  const [isDeleted, setIsDeleted] = useRecoilState(deleteState);\n\n  const deletePost = async () => {\n    await deleteDoc(doc(firestoreDB, \"Post\", postObj.id));\n    setIsDeleted((prev) => !prev);\n    // history.go(0);\n    console.log(\"delete doc\", postObj.id);\n  };\n\n  const likePost = async () => {\n    const postDoc = doc(firestoreDB, \"Post\", postObj.id);\n    await updateDoc(postDoc, {\n      like: postObj.like + 1,\n    });\n    console.log(\"like doc\", postObj.id);\n  };\n\n  const date = new Date(postObj.uploadedAt);\n  const dataString = `${\n    date.getMonth() + 1\n  }, ${date.getDate()}, ${date.getFullYear()}`;\n  return (\n    <>\n      <PostItBox postObj={postObj}>\n        {isOwner && (\n          <>\n            <div>\n              <button\n                style={{\n                  position: \"absolute\",\n                  marginBottom: 5,\n                  // float: \"right\",\n                  right: \"10px\",\n\n                  border: \"none\",\n                  backgroundColor: postObj.color,\n                  color: \"white\",\n                }}\n                onClick={deletePost}\n              >\n                ✖\n              </button>\n            </div>\n          </>\n        )}\n        <div style={{ width: 220 }} id={postObj.id}>\n          <span>{postObj.contents}</span>\n        </div>\n        <>\n          <div>\n            <button\n              style={{\n                position: \"absolute\",\n                marginBottom: 5,\n                right: \"10px\",\n                top: \"40px\",\n                border: \"none\",\n                backgroundColor: postObj.color,\n                color: \"white\",\n              }}\n              onClick={likePost}\n            >\n              <b>👍🏻 {postObj.like != 0 && postObj.like}</b>\n            </button>\n          </div>\n        </>\n      </PostItBox>\n    </>\n  );\n};\n\nexport default PostIt;\n","const ColorPalette = ({ color }) => {\n  // 포스트잇 색상 변경\n  const onColorClick = (e) => {\n    const {\n      target: { id },\n    } = e;\n    const $clickedPost = document.querySelector(\".post\");\n    const $clickedPostIt = document.querySelector(\".postIt\");\n\n    $clickedPost.animate(\n      { backgroundColor: id },\n      { duration: 400, fill: \"forwards\" }\n    );\n    $clickedPostIt.animate(\n      { backgroundColor: id },\n      { duration: 400, fill: \"forwards\" }\n    );\n    setTimeout(() => {\n      $clickedPost.style.backgroundColor = id;\n      $clickedPostIt.style.backgroundColor = id;\n    }, 100);\n  };\n  return (\n    <div\n      id={color}\n      className=\"colorButton\"\n      style={{ backgroundColor: color }}\n      onClick={onColorClick}\n    ></div>\n  );\n};\n\nexport default ColorPalette;\n","import { firestoreDB } from \"firebase\";\nimport {\n  AnimatePresence,\n  motion,\n  MotionValue,\n  useViewportScroll,\n  Variants,\n} from \"framer-motion\";\nimport { collection, addDoc } from \"@firebase/firestore\";\nimport React, { useState, useEffect } from \"react\";\nimport ColorPalette from \"./ColorPalette\";\nimport styled from \"styled-components\";\nimport { writeOpenState } from \"atoms\";\nimport { useRecoilState } from \"recoil\";\n\nconst Overlay = styled(motion.div)`\n  z-index: 1000;\n  position: fixed;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  opacity: 0;\n  background-color: rgba(0, 0, 0, 0.6);\n`;\n\nconst Modal = styled(motion.div)`\n  z-index: 1001;\n  border-radius: 15px !important;\n  overflow: auto !important;\n  top: ${(props) => props.scrollY.get() + 100}px;\n  position: absolute;\n  width: 800px;\n\n  height: 60%;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n  background-color: white;\n`;\n\nfunction PostItModal({ userObj }) {\n  // 0) 상태 모음\n  const [post, setPost] = useState(\"\");\n  const [postArry, setPostArry] = useState([]);\n  const [isSorted, setIsSorted] = useState(false);\n  const [isModalOn, setIsModalOn] = useRecoilState(writeOpenState);\n\n  // 1) 텍스트입력 감지 후 입력값(value)을 [post]로 올리기\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setPost(value);\n  };\n\n  // 2) 업로드\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    const $postIt = document.querySelector(\".postIt\");\n    const postObj = {\n      // 상태를 객체로 받아와서 firestore에 올리기\n      contents: post,\n      uploadedAt: Date.now(),\n      author: userObj.uid,\n      color: $postIt.style.backgroundColor,\n      like: 0,\n    };\n    const docRef = await addDoc(collection(firestoreDB, \"Post\"), postObj);\n    console.log(\"Document written with ID: \", docRef.id);\n    // 입력칸 비우기\n    document.querySelector(\".post\").value = \"\";\n    setPost(\"\");\n    setIsModalOn(false);\n  };\n  const onOverlayClick = () => {\n    setIsModalOn((prev) => !prev);\n  };\n  const { scrollY } = useViewportScroll();\n  return (\n    <>\n      <AnimatePresence>\n        <Overlay\n          onClick={onOverlayClick}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n        />\n        <Modal scrollY={scrollY}>\n          <div style={{ flex: 1, marginTop: 70 }}>\n            <form className=\"postForm\">\n              <div className=\"postIt\" style={{ backgroundColor: \"#ffd359\" }}>\n                <textarea\n                  style={{ marginTop: \"10px\" }}\n                  className=\"post\"\n                  cols={30}\n                  rows={7}\n                  value={post}\n                  onChange={onChange}\n                  placeholder=\"What's on your mind?\"\n                  maxLength={140}\n                ></textarea>\n                <div className=\"colorPalette\">\n                  {[\"#ffd359\", \"#e2ff3d\", \"#ff8547\", \"#44ccff\", \"#ff8adc\"].map(\n                    (e) => (\n                      <ColorPalette color={e} />\n                    )\n                  )}\n                </div>\n              </div>\n              <button className=\"defaultButton\" onClick={onSubmit}>\n                Post!\n              </button>\n            </form>\n          </div>\n        </Modal>\n      </AnimatePresence>\n    </>\n  );\n}\n\nexport default PostItModal;\n","import { firestoreDB } from \"firebase\";\nimport {\n  collection,\n  addDoc,\n  onSnapshot,\n  query,\n  orderBy,\n} from \"@firebase/firestore\";\nimport React, { useState, useEffect } from \"react\";\nimport PostIt from \"../components/PostIt\";\nimport \"../styles/App.css\";\nimport styled from \"styled-components\";\nimport PostItModal from \"components/PostItModal\";\nimport { useRecoilState } from \"recoil\";\nimport { writeOpenState } from \"atoms\";\n\nconst PostGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n`;\n\nconst WriteButton = styled.button`\n  cursor: pointer;\n  width: 100px;\n  border: none;\n  color: white;\n  background-color: orange;\n  padding: 5px;\n  font-size: 15px;\n  border-radius: 10px;\n  margin: 10px;\n  font-family: \"SpoqaHanSansNeo\";\n`;\n\nconst ButtonMenu = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  width: 300px;\n`;\n\nconst Home = ({ userObj }) => {\n  const [post, setPost] = useState(\"\");\n  const [postArry, setPostArry] = useState([]);\n  const [isSorted, setIsSorted] = useState(false);\n  const [isModalOn, setIsModalOn] = useRecoilState(writeOpenState);\n\n  const onSortClick = () => {\n    setIsSorted((prev) => !prev);\n    console.log(isSorted);\n  };\n  const onWriteClick = () => {\n    setIsModalOn((prev) => !prev);\n  };\n\n  // 4) 실시간 snapshot 렌더링\n  useEffect(() => {\n    // 정렬 기준\n    const sortOrder = \"uploadedAt\";\n    console.log(sortOrder);\n    // 쿼리문 생성\n    const q = query(\n      collection(firestoreDB, \"Post\"),\n      // ++만약 좋아요가 같으면 uploadedAt 순으로 정렬 기능 추가\n      orderBy(sortOrder, \"desc\")\n    );\n    // onSnapshot으로 [postArry] 설정\n    const postSnapshot = onSnapshot(q, (snapshot) => {\n      const docArry = snapshot.docs.map((elem) => ({\n        id: elem.id,\n        ...elem.data(),\n      }));\n      setPostArry(docArry);\n    });\n    console.log(\"isSorted\", isSorted);\n    // deps로 isSorted 받기\n  }, [isSorted]);\n\n  useEffect(() => {\n    // 차트 인 애니메이션\n  }, []);\n  // const postGetter = async () => {\n  // \t// 정렬 기준\n  // \tconst sortOrder = isSorted ? \"like\" : \"uploadedAt\";\n  // \tconsole.log(sortOrder);\n  // \t// 쿼리문 생성\n  // \tconst q = query(\n  // \t\tcollection(firestoreDB, \"Post\"),\n  // \t\t// ++만약 좋아요가 같으면 uploadedAt 순으로 정렬 기능 추가\n  // \t\torderBy(sortOrder, \"desc\")\n  // \t);\n  // \t// onSnapshot으로 [postArry] 설정\n  // \tconst postDocs = await getDocs(q);\n  // \tpostDocs.forEach((post) => {\n  // \t\tsetPostArry((prev) => [post.data(), ...prev]);\n  // \t});\n  // };\n  // useEffect(() => {\n  // \t// deps로 isSorted 받기\n  // \tpostGetter();\n  // }, [isSorted]);\n\n  // 렌더링\n  return (\n    <>\n      <ButtonMenu>\n        <button className=\"defaultButton\" onClick={onSortClick}>\n          Sort by {isSorted ? \"Time\" : \"Like\"}\n        </button>\n        <WriteButton onClick={onWriteClick}>새 글 작성하기</WriteButton>\n      </ButtonMenu>\n\n      <div className=\"flexContainer\">\n        {isModalOn && <PostItModal userObj={userObj} />}\n        <PostGrid>\n          {postArry\n            .sort((a, b) => {\n              if (isSorted) {\n                return b.like - a.like;\n              } else {\n                return b.uploadedAt - a.uploadedAt;\n              }\n            })\n            .map((element) => (\n              <PostIt\n                key={element.id}\n                postObj={element}\n                isOwner={userObj.uid === element.author}\n              />\n            ))}\n        </PostGrid>\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  collection,\n  onSnapshot,\n  orderBy,\n  query,\n  where,\n} from \"firebase/firestore\";\nimport styled from \"styled-components\";\nimport { firestoreDB } from \"firebase\";\nimport PostIt from \"components/PostIt\";\nimport { useRecoilState } from \"recoil\";\nimport { deleteState } from \"atoms\";\n\nconst PostGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n`;\n\nconst Profile = ({ userObj }) => {\n  const uId = userObj.uid;\n  console.log(uId);\n\n  const [postArry, setPostArry] = useState([]);\n  const [isDeleted, setIsDeleted] = useRecoilState(deleteState);\n\n  useEffect(() => {\n    const q = query(\n      collection(firestoreDB, \"Post\"),\n      where(\"author\", \"==\", uId),\n      orderBy(\"uploadedAt\", \"desc\")\n    );\n    const postSnapshot = onSnapshot(q, (snapshot) => {\n      const docArry = snapshot.docs.map((elem) => ({\n        id: elem.id,\n        ...elem.data(),\n      }));\n      setPostArry(docArry);\n    });\n  }, [isDeleted]);\n\n  // 내가 쓴 글 모아서 보기\n  return (\n    <>\n      <b style={{ marginLeft: 40, fontSize: \"20px\" }}>내가 쓴 글 모아보기</b>\n      <div className=\"flexContainer\">\n        <PostGrid>\n          {postArry.length == 0\n            ? \"아직 쓴 글이 없네요\"\n            : postArry.map((element) => (\n                <PostIt\n                  key={element.id}\n                  postObj={element}\n                  isOwner={userObj.uid === element.author}\n                />\n              ))}\n        </PostGrid>\n      </div>\n    </>\n  );\n};\nexport default Profile;\n","import React, { useState } from \"react\";\nimport { authService } from \"firebase\";\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  GoogleAuthProvider,\n} from \"firebase/auth\";\nimport { useForm } from \"react-hook-form\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  background-color: white;\n  height: 100vh;\n`;\n\nconst ButtonMenu = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  width: 400px;\n  gap: 30px;\n`;\n\nconst FormDiv = styled.div`\n  margin-top: 50px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\nconst Form = styled.form`\n  margin: 0 auto;\n  width: 100%;\n  max-width: 414px;\n  padding: 1.3rem;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\nconst Input = styled.input`\n  max-width: 100%;\n  padding: 11px 13px;\n  background: #f9f9fa;\n  color: #f03d4e;\n  margin-bottom: 0.9rem;\n  border-radius: 4px;\n  outline: 0;\n  border: 1px solid rgba(245, 245, 245, 0.7);\n  font-size: 14px;\n  transition: all 0.3s ease-out;\n  box-shadow: 0 0 3px rgba(0, 0, 0, 0.1), 0 1px 1px rgba(0, 0, 0, 0.1);\n  :focus,\n  :hover {\n    box-shadow: 0 0 3px rgba(0, 0, 0, 0.15), 0 1px 5px rgba(0, 0, 0, 0.1);\n  }\n`;\nconst SubmitButton = styled.button`\n  max-width: 100%;\n  padding: 11px 13px;\n  color: rgb(253, 249, 243);\n  font-weight: 600;\n  text-transform: uppercase;\n  background: #f03d4e;\n  border: none;\n  border-radius: 3px;\n  outline: 0;\n  cursor: pointer;\n  margin-top: 0.6rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease-out;\n  :hover {\n    background: rgb(200, 50, 70);\n    animation: 0.2s ease-out forwards;\n  }\n`;\n\nconst GoogleButton = styled.button`\n  max-width: 100%;\n  padding: 11px 13px;\n  color: rgb(253, 249, 243);\n  font-weight: 600;\n  text-transform: uppercase;\n  background: grey;\n  border: none;\n  border-radius: 3px;\n  outline: 0;\n  cursor: pointer;\n  margin-top: 0.6rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease-out;\n  :hover {\n    background: #3d3b3b;\n    animation: 0.2s ease-out forwards;\n  }\n`;\n\nconst AlterButton = styled.button`\n  max-width: 100%;\n  padding: 11px 13px;\n  color: black;\n  font-weight: 600;\n  text-transform: uppercase;\n  background: #e8dfdf;\n  border: none;\n  border-radius: 3px;\n  outline: 0;\n  cursor: pointer;\n  margin-top: 0.6rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease-out;\n  :hover {\n    background: #303030;\n    color: white;\n    animation: 0.2s ease-out forwards;\n  }\n`;\n\nconst Title = styled.h2`\n  text-align: center;\n  font-size: 38px;\n  margin-top: 30px;\n  margin-bottom: 20px;\n`;\n\nfunction Auth() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccout] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  const toggleAccount = () => setNewAccout((prev) => !prev);\n\n  const { register, handleSubmit } = useForm();\n\n  const onSubmit = async (data, e) => {\n    console.log(data);\n    e.preventDefault();\n    try {\n      let authData;\n      if (newAccount) {\n        authData = await createUserWithEmailAndPassword(\n          authService,\n          email,\n          password\n        );\n      } else {\n        authData = await signInWithEmailAndPassword(\n          authService,\n          email,\n          password\n        );\n      }\n    } catch (error) {\n      console.log(error.message);\n      setError(error.message);\n    }\n  };\n  const onGoogleClick = async () => {\n    const provider = new GoogleAuthProvider();\n    try {\n      const result = await signInWithPopup(authService, provider);\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      // The signed-in user info.\n      const user = result.user;\n    } catch (error) {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n    }\n  };\n\n  const onChange = (e) => {\n    //destructring event\n    const {\n      target: { name, value },\n    } = e;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n\n  return (\n    <Wrapper>\n      <Title>사용자 인증</Title>\n      <FormDiv>\n        <Form onSubmit={handleSubmit(onSubmit)}>\n          <Input\n            {...register(\"email\", {\n              required: true,\n              onChange: onChange,\n              value: email,\n            })}\n            type=\"email\"\n            id=\"id\"\n            placeholder=\"Email\"\n            // value={email}\n            // onChange={onChange}\n          ></Input>\n          <Input\n            {...register(\"password\", {\n              required: true,\n              onChange: onChange,\n              value: password,\n            })}\n            type=\"text\"\n            id=\"pw\"\n            placeholder=\"Password\"\n            // required\n            // value={password}\n            // onChange={onChange}\n          ></Input>\n          <SubmitButton type=\"submit\">\n            {newAccount ? \"가입하기\" : \"로그인\"}\n          </SubmitButton>\n        </Form>\n        <ButtonMenu>\n          <div>\n            <GoogleButton onClick={onGoogleClick}>\n              Goolge 로그인 하기\n            </GoogleButton>\n            {/* <button>Github으로 로그인 하기</button> */}\n          </div>\n          <div>\n            <AlterButton onClick={toggleAccount}>\n              {newAccount ? \"이미 계정이 있어요\" : \"새롭게 계정을 생성해야해요\"}\n            </AlterButton>\n          </div>\n        </ButtonMenu>\n\n        {error}\n      </FormDiv>\n    </Wrapper>\n  );\n}\nexport default Auth;\n","import { authService } from \"firebase\";\nimport React from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Nav = styled.nav`\n  margin: 30px;\n  display: flex;\n  gap: 20px;\n  height: 30px;\n  align-items: baseline;\n  background-color: white;\n\n  a {\n    text-decoration: none;\n    font-size: 12px;\n    color: black;\n    height: 1rem;\n\n    :first-child {\n      color: \"1B1A17\";\n      font-size: 24px;\n    }\n  }\n`;\n\nconst LogOutButton = styled.button`\n  position: absolute;\n  cursor: pointer;\n  right: 20px;\n  width: 50px;\n  border: none;\n  color: white;\n  background-color: grey;\n  padding: 5px;\n  font-size: 10px;\n  border-radius: 10px;\n  margin: 10px;\n  font-family: \"SpoqaHanSansNeo\";\n  transition: all 0.3s ease-out;\n  :hover {\n    background: #303030;\n    color: white;\n    animation: 0.2s ease-out forwards;\n  }\n`;\n\nconst Navigation = () => {\n  const history = useHistory();\n\n  const profileMatch = useRouteMatch(\"/profile\");\n  console.log(profileMatch);\n  const onLogOutClick = () => {\n    authService.signOut();\n    history.push(\"/\");\n  };\n  return (\n    <Nav isProfile={profileMatch}>\n      <Link to={\"/\"}>Post It Board</Link>\n\n      <Link\n        style={{\n          textDecoration: profileMatch ? \"underline\" : \"none\",\n        }}\n        to={\"/profile\"}\n      >\n        My profile\n      </Link>\n      <LogOutButton onClick={onLogOutClick}>Log Out</LogOutButton>\n    </Nav>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Auth from \"./routes/Auth\";\nimport Navigation from \"./components/Navigation\";\n\nconst AppRouter = ({ isLoggedin, userObj }) => {\n  console.log(isLoggedin ? \"Logged in\" : \"Not logged in\");\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      {isLoggedin && <Navigation />}\n      <Switch>\n        {/* 로그인 정보를 받아서 null이 아니면 Auth 화면으로 처리해줌 */}\n        {isLoggedin ? (\n          <>\n            <Route exact path=\"/\">\n              <Home userObj={userObj} />\n            </Route>\n            <Route path={[\"/profile\"]}>\n              <Profile userObj={userObj} />\n            </Route>\n          </>\n        ) : (\n          <>\n            <Route exact path=\"/\">\n              <Auth />\n            </Route>\n          </>\n        )}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import AppRouter from \"AppRouter\";\nimport React, { useState, useEffect } from \"react\";\nimport { authService } from \"firebase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedin, setLoggedin] = useState(true);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setLoggedin(true);\n        setUserObj(user);\n      } else {\n        setLoggedin(false);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {init ? (\n        <AppRouter isLoggedin={isLoggedin} userObj={userObj} />\n      ) : (\n        \"로그인 정보 불러오는 중...\"\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport firebase from \"firebase\";\nimport { RecoilRoot } from \"recoil\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}