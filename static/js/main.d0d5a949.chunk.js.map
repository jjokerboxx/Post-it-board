{"version":3,"sources":["firebase.js","components/PostIt.js","components/ColorPalette.js","components/PostItModal.js","routes/Home.js","routes/Profile.js","routes/Auth.js","components/Navigation.js","AppRouter.js","App.js","index.js"],"names":["authService","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","firestoreDB","getFirestore","PostIt","postObj","isOwner","deletePost","a","deleteDoc","doc","id","console","log","likePost","postDoc","updateDoc","like","date","Date","uploadedAt","getMonth","getDate","getFullYear","style","position","wordWrap","backgroundColor","color","border","borderRadius","padding","margin","outlineStyle","resize","width","height","marginBottom","right","onClick","contents","top","ColorPalette","className","e","target","$clickedPost","document","querySelector","$clickedPostIt","animate","duration","fill","setTimeout","PostItModal","userObj","useState","post","setPost","onSubmit","preventDefault","$postIt","now","author","uid","addDoc","collection","docRef","value","flex","marginTop","cols","rows","onChange","placeholder","maxLength","map","PostGrid","styled","div","Home","postArry","setPostArry","isSorted","setIsSorted","isModalOn","setIsModalOn","useEffect","sortOrder","q","query","orderBy","onSnapshot","snapshot","docArry","docs","elem","data","prev","sort","b","element","Profile","history","useHistory","signOut","push","Auth","email","setEmail","password","setPassword","newAccount","setNewAccout","error","setError","useForm","register","handleSubmit","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","onGoogleClick","provider","GoogleAuthProvider","signInWithPopup","result","credential","credentialFromResult","accessToken","user","code","credentialFromError","name","required","type","Navigation","ul","to","AppRouter","isLoggedin","basename","exact","path","App","init","setInit","setLoggedin","setUserObj","onAuthStateChanged","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d0d5a949.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n\tapiKey: process.env.REACT_APP_API_KEY,\n\tauthDomain: process.env.REACT_APP_AUTH_DOMAIN,\n\tprojectId: process.env.REACT_APP_PROJECT_ID,\n\tstorageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n\tmessagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n\tappId: process.env.REACT_APP_APP_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\n\nexport const authService = getAuth();\nexport const firestoreDB = getFirestore();\n","import React, { useState, useEffect } from \"react\";\nimport { firestoreDB } from \"firebase\";\nimport { collection, deleteDoc, doc, updateDoc } from \"@firebase/firestore\";\n\nconst PostIt = ({ postObj, isOwner }) => {\n  const deletePost = async () => {\n    await deleteDoc(doc(firestoreDB, \"Post\", postObj.id));\n    console.log(\"delete doc\", postObj.id);\n  };\n\n  const likePost = async () => {\n    const postDoc = doc(firestoreDB, \"Post\", postObj.id);\n    await updateDoc(postDoc, {\n      like: postObj.like + 1,\n    });\n    console.log(\"like doc\", postObj.id);\n  };\n\n  const date = new Date(postObj.uploadedAt);\n  const dataString = `${\n    date.getMonth() + 1\n  }, ${date.getDate()}, ${date.getFullYear()}`;\n  return (\n    <>\n      <div\n        style={{\n          position: \"relative\",\n          wordWrap: \"break-word\",\n          backgroundColor: postObj.color,\n          border: \"none\",\n          borderRadius: (20, 20, 10, 10),\n          padding: 10,\n          margin: 30,\n          outlineStyle: \"none\",\n          resize: \"none\",\n          width: 250,\n          height: 150,\n        }}\n      >\n        {isOwner && (\n          <>\n            <div>\n              <button\n                style={{\n                  position: \"absolute\",\n                  marginBottom: 5,\n                  // float: \"right\",\n                  right: \"10px\",\n\n                  border: \"none\",\n                  backgroundColor: postObj.color,\n                  color: \"white\",\n                }}\n                onClick={deletePost}\n              >\n                ✖\n              </button>\n            </div>\n          </>\n        )}\n        <div style={{ width: 220 }} id={postObj.id}>\n          <span>{postObj.contents}</span>\n        </div>\n        <>\n          <div>\n            <button\n              style={{\n                position: \"absolute\",\n                marginBottom: 5,\n                right: \"10px\",\n                top: \"40px\",\n                border: \"none\",\n                backgroundColor: postObj.color,\n                color: \"white\",\n              }}\n              onClick={likePost}\n            >\n              <b>👍🏻 {postObj.like != 0 && postObj.like}</b>\n            </button>\n          </div>\n        </>\n      </div>\n    </>\n  );\n};\n\nexport default PostIt;\n","const ColorPalette = ({ color }) => {\n  // 포스트잇 색상 변경\n  const onColorClick = (e) => {\n    const {\n      target: { id },\n    } = e;\n    const $clickedPost = document.querySelector(\".post\");\n    const $clickedPostIt = document.querySelector(\".postIt\");\n\n    $clickedPost.animate(\n      { backgroundColor: id },\n      { duration: 400, fill: \"forwards\" }\n    );\n    $clickedPostIt.animate(\n      { backgroundColor: id },\n      { duration: 400, fill: \"forwards\" }\n    );\n    setTimeout(() => {\n      $clickedPost.style.backgroundColor = id;\n      $clickedPostIt.style.backgroundColor = id;\n    }, 100);\n  };\n  return (\n    <div\n      id={color}\n      className=\"colorButton\"\n      style={{ backgroundColor: color }}\n      onClick={onColorClick}\n    ></div>\n  );\n};\n\nexport default ColorPalette;\n","import { firestoreDB } from \"firebase\";\nimport { collection, addDoc } from \"@firebase/firestore\";\nimport React, { useState, useEffect } from \"react\";\nimport ColorPalette from \"./ColorPalette\";\nfunction PostItModal({ userObj }) {\n  // 0) 상태 모음\n  const [post, setPost] = useState(\"\");\n  const [postArry, setPostArry] = useState([]);\n  const [isSorted, setIsSorted] = useState(false);\n\n  // 1) 텍스트입력 감지 후 입력값(value)을 [post]로 올리기\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setPost(value);\n  };\n\n  // 2) 업로드\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    const $postIt = document.querySelector(\".postIt\");\n    const postObj = {\n      // 상태를 객체로 받아와서 firestore에 올리기\n      contents: post,\n      uploadedAt: Date.now(),\n      author: userObj.uid,\n      color: $postIt.style.backgroundColor,\n      like: 0,\n    };\n    const docRef = await addDoc(collection(firestoreDB, \"Post\"), postObj);\n    console.log(\"Document written with ID: \", docRef.id);\n    // 입력칸 비우기\n    document.querySelector(\".post\").value = \"\";\n    setPost(\"\");\n  };\n  return (\n    <div style={{ flex: 1, margin: 30 }}>\n      <form className=\"postForm\">\n        <div className=\"postIt\" style={{ backgroundColor: \"#ffd359\" }}>\n          <textarea\n            style={{ marginTop: \"10px\" }}\n            className=\"post\"\n            cols={30}\n            rows={7}\n            value={post}\n            onChange={onChange}\n            placeholder=\"What's on your mind?\"\n            maxLength={140}\n          ></textarea>\n          <div className=\"colorPalette\">\n            {[\"#ffd359\", \"#e2ff3d\", \"#ff8547\", \"#44ccff\", \"#ff8adc\"].map(\n              (e) => (\n                <ColorPalette color={e} />\n              )\n            )}\n          </div>\n        </div>\n        <button className=\"defaultButton\" onClick={onSubmit}>\n          Post!\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default PostItModal;\n","import { firestoreDB } from \"firebase\";\nimport {\n  collection,\n  addDoc,\n  onSnapshot,\n  query,\n  orderBy,\n} from \"@firebase/firestore\";\nimport React, { useState, useEffect } from \"react\";\nimport PostIt from \"../components/PostIt\";\nimport \"../styles/App.css\";\nimport styled from \"styled-components\";\nimport PostItModal from \"components/PostItModal\";\n\nconst PostGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n`;\n\nconst Home = ({ userObj }) => {\n  const [post, setPost] = useState(\"\");\n  const [postArry, setPostArry] = useState([]);\n  const [isSorted, setIsSorted] = useState(false);\n  const [isModalOn, setIsModalOn] = useState(false);\n  // 3) isSorted를 true || false로 교체\n  const onSortClick = () => {\n    setIsSorted((prev) => !prev);\n    console.log(isSorted);\n  };\n  const onWriteClick = () => {\n    setIsModalOn((prev) => !prev);\n  };\n\n  // 4) 실시간 snapshot 렌더링\n  useEffect(() => {\n    // 정렬 기준\n    const sortOrder = \"uploadedAt\";\n    console.log(sortOrder);\n    // 쿼리문 생성\n    const q = query(\n      collection(firestoreDB, \"Post\"),\n      // ++만약 좋아요가 같으면 uploadedAt 순으로 정렬 기능 추가\n      orderBy(sortOrder, \"desc\")\n    );\n    // onSnapshot으로 [postArry] 설정\n    const postSnapshot = onSnapshot(q, (snapshot) => {\n      const docArry = snapshot.docs.map((elem) => ({\n        id: elem.id,\n        ...elem.data(),\n      }));\n      setPostArry(docArry);\n    });\n    console.log(\"isSorted\", isSorted);\n    // deps로 isSorted 받기\n  }, [isSorted]);\n\n  useEffect(() => {\n    // 차트 인 애니메이션\n  }, []);\n  // const postGetter = async () => {\n  // \t// 정렬 기준\n  // \tconst sortOrder = isSorted ? \"like\" : \"uploadedAt\";\n  // \tconsole.log(sortOrder);\n  // \t// 쿼리문 생성\n  // \tconst q = query(\n  // \t\tcollection(firestoreDB, \"Post\"),\n  // \t\t// ++만약 좋아요가 같으면 uploadedAt 순으로 정렬 기능 추가\n  // \t\torderBy(sortOrder, \"desc\")\n  // \t);\n  // \t// onSnapshot으로 [postArry] 설정\n  // \tconst postDocs = await getDocs(q);\n  // \tpostDocs.forEach((post) => {\n  // \t\tsetPostArry((prev) => [post.data(), ...prev]);\n  // \t});\n  // };\n  // useEffect(() => {\n  // \t// deps로 isSorted 받기\n  // \tpostGetter();\n  // }, [isSorted]);\n\n  // 렌더링\n  return (\n    <>\n      <button className=\"defaultButton\" onClick={onSortClick}>\n        Sort by {isSorted ? \"Time\" : \"Like\"}\n      </button>\n      <button className=\"write\" onClick={onWriteClick}>\n        새로운 포스트잇 작성하기!\n      </button>\n      <div className=\"flexContainer\">\n        {isModalOn && <PostItModal userObj={userObj} />}\n        <PostGrid>\n          {postArry\n            .sort((a, b) => {\n              if (isSorted) {\n                return b.like - a.like;\n              } else {\n                return b.uploadedAt - a.uploadedAt;\n              }\n            })\n            .map((element) => (\n              <PostIt\n                key={element.id}\n                postObj={element}\n                isOwner={userObj.uid === element.author}\n              />\n            ))}\n        </PostGrid>\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { useHistory } from \"react-router\";\nimport { authService } from \"firebase\";\n\nconst Profile = () => {\n\tconst history = useHistory();\n\tconst onLogOutClick = () => {\n\t\tauthService.signOut();\n\t\thistory.push(\"/\");\n\t};\n\treturn (\n\t\t<>\n\t\t\t<button onClick={onLogOutClick}>Log Out</button>\n\t\t</>\n\t);\n};\nexport default Profile;\n","import React, { useState } from \"react\";\nimport { authService } from \"firebase\";\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  GoogleAuthProvider,\n} from \"firebase/auth\";\nimport { useForm } from \"react-hook-form\";\n\nfunction Auth() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccout] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  const toggleAccount = () => setNewAccout((prev) => !prev);\n\n  const { register, handleSubmit } = useForm();\n\n  const onSubmit = async (data, e) => {\n    console.log(data);\n    e.preventDefault();\n    try {\n      let authData;\n      if (newAccount) {\n        authData = await createUserWithEmailAndPassword(\n          authService,\n          email,\n          password\n        );\n      } else {\n        authData = await signInWithEmailAndPassword(\n          authService,\n          email,\n          password\n        );\n      }\n    } catch (error) {\n      console.log(error.message);\n      setError(error.message);\n    }\n  };\n  const onGoogleClick = async () => {\n    const provider = new GoogleAuthProvider();\n    try {\n      const result = await signInWithPopup(authService, provider);\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      // The signed-in user info.\n      const user = result.user;\n    } catch (error) {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n    }\n  };\n\n  const onChange = (e) => {\n    //destructring event\n    const {\n      target: { name, value },\n    } = e;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n\n  return (\n    <div>\n      <span>사용자 인증</span>\n      <div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <input\n            {...register(\"email\", {\n              required: true,\n              onChange: onChange,\n              value: email,\n            })}\n            type=\"email\"\n            id=\"id\"\n            placeholder=\"Email\"\n            // value={email}\n            // onChange={onChange}\n          ></input>\n          <input\n            {...register(\"password\", {\n              required: true,\n              onChange: onChange,\n              value: password,\n            })}\n            type=\"text\"\n            id=\"pw\"\n            placeholder=\"Password\"\n            // required\n            // value={password}\n            // onChange={onChange}\n          ></input>\n          <input\n            type=\"submit\"\n            value={newAccount ? \"가입하기\" : \"로그인\"}\n          ></input>\n        </form>\n        <div>\n          <button onClick={onGoogleClick}>Goolge로 로그인 하기</button>\n          {/* <button>Github으로 로그인 하기</button> */}\n        </div>\n        <div>\n          <button onClick={toggleAccount}>\n            {newAccount ? \"이미 계정이 있어요.\" : \"새롭게 계정을 생성해야해요.\"}\n          </button>\n        </div>\n        {error}\n      </div>\n    </div>\n  );\n}\nexport default Auth;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Nav = styled.ul`\n  display: flex;\n`;\n\nconst Navigation = () => {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/profile\">My profile</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Auth from \"./routes/Auth\";\nimport Navigation from \"./components/Navigation\";\n\nconst AppRouter = ({ isLoggedin, userObj }) => {\n  console.log(isLoggedin ? \"Logged in\" : \"Not logged in\");\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      {isLoggedin && <Navigation />}\n      <Switch>\n        {/* 로그인 정보를 받아서 null이 아니면 Auth 화면으로 처리해줌 */}\n        {isLoggedin ? (\n          <>\n            <Route exact path=\"/\">\n              <Home userObj={userObj} />\n            </Route>\n            <Route exact path=\"/profile\">\n              <Profile />\n            </Route>\n          </>\n        ) : (\n          <>\n            <Route exact path=\"/\">\n              <Auth />\n            </Route>\n          </>\n        )}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import AppRouter from \"AppRouter\";\nimport React, { useState, useEffect } from \"react\";\nimport { authService } from \"firebase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedin, setLoggedin] = useState(true);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setLoggedin(true);\n        setUserObj(user);\n      } else {\n        setLoggedin(false);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {init ? (\n        <AppRouter isLoggedin={isLoggedin} userObj={userObj} />\n      ) : (\n        \"로그인 정보 불러오는 중...\"\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport firebase from \"firebase\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}