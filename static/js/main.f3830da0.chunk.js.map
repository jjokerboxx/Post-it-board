{"version":3,"sources":["firebase.js","atoms.js","components/PostIt.js","components/ColorPalette.js","components/PostItModal.js","routes/Home.js","routes/Profile.js","routes/Auth.js","components/Navigation.js","AppRouter.js","App.js","index.js"],"names":["authService","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","firestoreDB","getFirestore","writeOpenState","atom","key","default","deleteState","userState","id","nickname","PostItBox","styled","div","props","postObj","color","PostIt","isOwner","uid","isLikedbyCurrentUser","useRecoilState","setIsDeleted","useState","isLiked","setIsLiked","deletePost","a","deleteDoc","doc","prev","likePost","userInfo","postDoc","updateDoc","like","arrayRemove","arrayUnion","date","Date","uploadedAt","getMonth","getDate","getFullYear","style","position","marginBottom","right","border","backgroundColor","onClick","width","contents","top","ColorPalette","className","e","target","$clickedPost","document","querySelector","$clickedPostIt","animate","duration","fill","setTimeout","Overlay","motion","Modal","scrollY","get","modalVariants","enter","opacity","visible","exit","scale","transition","PostItModal","userObj","post","setPost","setIsModalOn","onSubmit","preventDefault","$postIt","now","author","addDoc","collection","docRef","console","log","value","useViewportScroll","AnimatePresence","variants","layoutId","flex","marginTop","cols","rows","onChange","placeholder","maxLength","map","PostGrid","widthoffset","WriteButton","button","ButtonMenu","Home","offset","setOffset","postArry","setPostArry","likedPostId","setLikedPostId","isSorted","setIsSorted","isModalOn","setUserInfoState","useEffect","qu","query","where","onSnapshot","snapshot","userInfoArry","docs","elem","data","error","window","innerWidth","setResponsiveOffset","addEventListener","removeEventListener","q","orderBy","docArry","sort","b","element","idx","includes","WarningSign","Profile","uId","likedPostArry","setLikedPostArry","userNickname","useRecoilValue","Promise","allSettled","getDoc","likedpost","then","r","marginLeft","fontSize","length","undefined","Wrapper","FormDiv","Form","form","Input","input","SubmitButton","GoogleButton","AlterButton","Title","h2","Auth","email","setEmail","password","setPassword","newAccount","setNewAccout","setError","useForm","register","handleSubmit","createUserWithEmailAndPassword","authData","user","createdAt","setDoc","signInWithEmailAndPassword","message","onGoogleClick","provider","GoogleAuthProvider","signInWithPopup","result","credential","credentialFromResult","accessToken","code","credentialFromError","name","required","type","Nav","nav","LogOutButton","ChangeProfileButton","Navigation","history","useHistory","profileMatch","useRouteMatch","formCliked","setFormClicked","userInfoState","changeNickname","isProfile","to","textDecoration","signOut","push","AppRouter","isLoggedin","exact","path","App","init","setInit","setLoggedin","setUserObj","auth","onAuthStateChanged","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.f3830da0.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n\tapiKey: process.env.REACT_APP_API_KEY,\n\tauthDomain: process.env.REACT_APP_AUTH_DOMAIN,\n\tprojectId: process.env.REACT_APP_PROJECT_ID,\n\tstorageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n\tmessagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n\tappId: process.env.REACT_APP_APP_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\n\nexport const authService = getAuth();\nexport const firestoreDB = getFirestore();\n","import { atom } from \"recoil\";\n\nexport const writeOpenState = atom({\n  key: \"writeOpenState\",\n  default: false,\n});\n\nexport const deleteState = atom({\n  key: \"deleteState\",\n  default: false,\n});\n\nexport const userState = atom({\n  key: \"userState\",\n  default: { id: \"\", nickname: \"\" },\n});\n\nexport const likedPostIdArr = atom({\n  key: \"likedPostIdArr\",\n  default: [],\n});\n","import React, { useState, useEffect } from \"react\";\nimport { firestoreDB } from \"firebase\";\nimport {\n  collection,\n  deleteDoc,\n  doc,\n  updateDoc,\n  arrayUnion,\n  arrayRemove,\n} from \"@firebase/firestore\";\nimport styled from \"styled-components\";\nimport { useRecoilState } from \"recoil\";\nimport { deleteState } from \"atoms\";\n\nconst PostItBox = styled.div`\n  position: relative;\n  word-wrap: \"break-word\";\n  background-color: ${(props) => props.postObj.color};\n  box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;\n  /* border: \"none\"; */\n  border-radius: 10px;\n  padding: 10px;\n  margin: 30px;\n  outline-style: none;\n  resize: none;\n  width: 250px;\n  height: 150px;\n`;\n\n// TODO: layoutId 입력하기\nconst PostIt = ({ postObj, isOwner, uid, isLikedbyCurrentUser }) => {\n  const [isDeleted, setIsDeleted] = useRecoilState(deleteState);\n\n  const [isLiked, setIsLiked] = useState(isLikedbyCurrentUser);\n\n  const deletePost = async () => {\n    await deleteDoc(doc(firestoreDB, \"Post\", postObj.id));\n    setIsDeleted((prev) => !prev);\n  };\n\n  // 도대체 왜 매 포스트잇마다 현재 유저를 불러와야함? ===> 코드 수정하기\n\n  const likePost = async () => {\n    const userInfo = await doc(firestoreDB, \"UserInfo\", uid);\n    const postDoc = await doc(firestoreDB, \"Post\", postObj.id);\n\n    await updateDoc(postDoc, {\n      like: isLiked ? postObj.like - 1 : postObj.like + 1,\n    });\n    await updateDoc(userInfo, {\n      likePost: isLiked ? arrayRemove(postObj.id) : arrayUnion(postObj.id),\n    });\n\n    setIsLiked((prev) => !prev);\n  };\n\n  const date = new Date(postObj.uploadedAt);\n  const dataString = `${\n    date.getMonth() + 1\n  }, ${date.getDate()}, ${date.getFullYear()}`;\n  return (\n    <>\n      <PostItBox postObj={postObj}>\n        {isOwner && (\n          <>\n            <div>\n              <button\n                style={{\n                  position: \"absolute\",\n                  marginBottom: 5,\n                  // float: \"right\",\n                  right: \"10px\",\n\n                  border: \"none\",\n                  backgroundColor: postObj.color,\n                  color: \"white\",\n                }}\n                onClick={deletePost}\n              >\n                ✖\n              </button>\n            </div>\n          </>\n        )}\n        <div style={{ width: 220 }} id={postObj.id}>\n          <span>{postObj.contents}</span>\n        </div>\n        <>\n          <div>\n            <button\n              style={{\n                position: \"absolute\",\n                marginBottom: 5,\n                right: \"10px\",\n                top: \"40px\",\n                border: \"none\",\n                backgroundColor: postObj.color,\n                color: \"white\",\n              }}\n              onClick={likePost}\n            >\n              <b>👍🏻 {postObj.like != 0 && postObj.like}</b>\n            </button>\n          </div>\n        </>\n      </PostItBox>\n    </>\n  );\n};\n\nexport default PostIt;\n","const ColorPalette = ({ color }) => {\n  // 포스트잇 색상 변경\n  const onColorClick = (e) => {\n    const {\n      target: { id },\n    } = e;\n    const $clickedPost = document.querySelector(\".post\");\n    const $clickedPostIt = document.querySelector(\".postIt\");\n\n    $clickedPost.animate(\n      { backgroundColor: id },\n      { duration: 400, fill: \"forwards\" }\n    );\n    $clickedPostIt.animate(\n      { backgroundColor: id },\n      { duration: 400, fill: \"forwards\" }\n    );\n    setTimeout(() => {\n      $clickedPost.style.backgroundColor = id;\n      $clickedPostIt.style.backgroundColor = id;\n    }, 100);\n  };\n  return (\n    <div\n      id={color}\n      className=\"colorButton\"\n      style={{ backgroundColor: color }}\n      onClick={onColorClick}\n    ></div>\n  );\n};\n\nexport default ColorPalette;\n","import { firestoreDB } from \"firebase\";\nimport {\n  AnimatePresence,\n  motion,\n  MotionValue,\n  useViewportScroll,\n  Variants,\n} from \"framer-motion\";\nimport { collection, addDoc } from \"@firebase/firestore\";\nimport React, { useState, useEffect } from \"react\";\nimport ColorPalette from \"./ColorPalette\";\nimport styled from \"styled-components\";\nimport { writeOpenState } from \"atoms\";\nimport { useRecoilState } from \"recoil\";\n\nconst Overlay = styled(motion.div)`\n  z-index: 1000;\n  position: fixed;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  opacity: 0;\n  background-color: rgba(0, 0, 0, 0.6);\n`;\n\nconst Modal = styled(motion.div)`\n  z-index: 1001;\n  border-radius: 15px !important;\n  overflow: auto !important;\n  top: ${(props) => props.scrollY.get() + 100}px;\n  position: absolute;\n\n  // mobile edia-query 적용하기\n  width: 800px;\n  height: 60%;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n  background-color: white;\n`;\nconst modalVariants = {\n  enter: {\n    opacity: 0,\n  },\n  visible: {\n    opacity: 1,\n  },\n  exit: {\n    scale: 0,\n    opacity: 0,\n    transition: {\n      duration: 0.8,\n    },\n  },\n};\n\nfunction PostItModal({ userObj }) {\n  // 0) 상태 모음\n  const [post, setPost] = useState(\"\");\n  const [postArry, setPostArry] = useState([]);\n  const [isSorted, setIsSorted] = useState(false);\n  const [isModalOn, setIsModalOn] = useRecoilState(writeOpenState);\n\n  // 1) 텍스트입력 감지 후 입력값(value)을 [post]로 올리기\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setPost(value);\n  };\n\n  // 2) 업로드\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    const $postIt = document.querySelector(\".postIt\");\n    const postObj = {\n      // 상태를 객체로 받아와서 firestore에 올리기\n      contents: post,\n      uploadedAt: Date.now(),\n      author: userObj.uid,\n      color: $postIt.style.backgroundColor,\n      like: 0,\n    };\n    const docRef = await addDoc(collection(firestoreDB, \"Post\"), postObj);\n    console.log(\"Document written with ID: \", docRef.id);\n    // 입력칸 비우기\n    document.querySelector(\".post\").value = \"\";\n    setPost(\"\");\n    setIsModalOn(false);\n  };\n  const onOverlayClick = () => {\n    setIsModalOn((prev) => !prev);\n  };\n  const { scrollY } = useViewportScroll();\n  return (\n    <>\n      <AnimatePresence>\n        <Overlay\n          onClick={onOverlayClick}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n        />\n        <Modal\n          variants={modalVariants}\n          exit=\"exit\"\n          scrollY={scrollY}\n          layoutId={\"PostitModal\"}\n        >\n          <div style={{ flex: 1, marginTop: 70 }}>\n            <form className=\"postForm\">\n              <div className=\"postIt\" style={{ backgroundColor: \"#ffd359\" }}>\n                <textarea\n                  style={{ marginTop: \"10px\" }}\n                  className=\"post\"\n                  cols={30}\n                  rows={7}\n                  value={post}\n                  onChange={onChange}\n                  placeholder=\"What's on your mind?\"\n                  maxLength={140}\n                ></textarea>\n                <div className=\"colorPalette\">\n                  {[\"#ffd359\", \"#e2ff3d\", \"#ff8547\", \"#44ccff\", \"#ff8adc\"].map(\n                    (e) => (\n                      <ColorPalette color={e} />\n                    )\n                  )}\n                </div>\n              </div>\n              <button className=\"defaultButton\" onClick={onSubmit}>\n                Post!\n              </button>\n            </form>\n          </div>\n        </Modal>\n      </AnimatePresence>\n    </>\n  );\n}\n\nexport default PostItModal;\n","import { firestoreDB } from \"firebase\";\nimport {\n  collection,\n  addDoc,\n  onSnapshot,\n  query,\n  orderBy,\n  where,\n} from \"@firebase/firestore\";\nimport React, { useState, useEffect } from \"react\";\nimport PostIt from \"../components/PostIt\";\nimport \"../styles/App.css\";\nimport { motion, Variants } from \"framer-motion\";\nimport styled from \"styled-components\";\nimport PostItModal from \"components/PostItModal\";\nimport { useRecoilState } from \"recoil\";\nimport { likedPostIdArr, userState, writeOpenState } from \"atoms\";\nimport { AnimatePresence } from \"framer-motion\";\n\nconst PostGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${(props) => props.widthoffset}, 1fr);\n`;\nconst Shade = styled(motion.div)`\n  z-index: -999;\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n`;\nconst WriteButton = styled.button`\n  cursor: pointer;\n  width: 100px;\n  border: none;\n  color: white;\n  background-color: orange;\n  padding: 5px;\n  font-size: 15px;\n  border-radius: 10px;\n  margin: 10px;\n  font-family: \"SpoqaHanSansNeo\";\n`;\n\nconst ButtonMenu = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  width: 300px;\n`;\n\nconst Home = ({ userObj }) => {\n  let [offset, setOffset] = useState(0);\n  const [postArry, setPostArry] = useState([]);\n  // const [likedPostId, setLikedPostId] = useRecoilState(likedPostIdArr);\n  const [likedPostId, setLikedPostId] = useState([]);\n  const [isSorted, setIsSorted] = useState(false);\n  const [isModalOn, setIsModalOn] = useRecoilState(writeOpenState);\n  const [userInfoState, setUserInfoState] = useRecoilState(userState);\n\n  const onSortClick = () => {\n    setIsSorted((prev) => !prev);\n    console.log(isSorted);\n  };\n  const onWriteClick = () => {\n    setIsModalOn((prev) => !prev);\n  };\n\n  useEffect(() => {\n    try {\n      const qu = query(\n        collection(firestoreDB, \"UserInfo\"),\n        where(\"id\", \"==\", userObj.uid)\n      );\n      const userSnapshot = onSnapshot(qu, (snapshot) => {\n        const userInfoArry = snapshot.docs.map((elem) => ({\n          ...elem.data(),\n        }));\n        const { likePost } = userInfoArry[0];\n        const { nickname } = userInfoArry[0];\n        setLikedPostId(likePost);\n        setUserInfoState({ id: userObj.uid, nickname: nickname });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (window.innerWidth < 600) {\n      setOffset(1);\n    } else if (window.innerWidth <= 930) {\n      setOffset(2);\n    } else if (window.innerWidth < 1200) {\n      setOffset(3);\n    } else if (window.innerWidth > 1200) {\n      setOffset(4);\n    }\n    const setResponsiveOffset = () => {\n      if (window.innerWidth < 600) {\n        setOffset(1);\n      } else if (window.innerWidth <= 930) {\n        setOffset(2);\n      } else if (window.innerWidth < 1200) {\n        setOffset(3);\n      } else if (window.innerWidth > 1200) {\n        setOffset(4);\n      }\n    };\n    // resize 이벤트 리스너 추가해서 실시간으로 반응형 웹 만들기\n    window.addEventListener(\"resize\", setResponsiveOffset);\n\n    // 항상 이벤트 리스너를 리턴해서 메모리 누수를 막아야한다.\n    return () => window.removeEventListener(\"resize\", setResponsiveOffset);\n  }, []);\n\n  // 4) 실시간 snapshot 렌더링\n  useEffect(() => {\n    // 정렬 기준\n    const sortOrder = \"uploadedAt\";\n    // 쿼리문 생성\n    const q = query(\n      collection(firestoreDB, \"Post\"),\n      orderBy(sortOrder, \"desc\")\n    );\n    const postSnapshot = onSnapshot(q, (snapshot) => {\n      const docArry = snapshot.docs.map((elem) => ({\n        id: elem.id,\n        ...elem.data(),\n      }));\n      setPostArry(docArry);\n    });\n  }, [isSorted]);\n\n  return (\n    <>\n      <AnimatePresence>\n        <ButtonMenu>\n          <button className=\"defaultButton\" onClick={onSortClick}>\n            Sort by {isSorted ? \"Time\" : \"Like\"}\n          </button>\n          <WriteButton onClick={onWriteClick}>새 글 작성하기</WriteButton>\n        </ButtonMenu>\n\n        <div className=\"flexContainer\">\n          {/* <Shade\n            layoutId=\"PostitModal\"\n          /> */}\n\n          {isModalOn && <PostItModal userObj={userObj} />}\n\n          <PostGrid widthoffset={offset}>\n            {postArry\n              .sort((a, b) => {\n                if (isSorted) {\n                  return b.like - a.like;\n                } else {\n                  return b.uploadedAt - a.uploadedAt;\n                }\n              })\n              .map((element, idx) => {\n                if (idx == 0) {\n                  return (\n                    <PostIt\n                      key={element.id}\n                      postObj={element}\n                      isOwner={userObj.uid === element.author}\n                      uid={userObj.uid}\n                      isLikedbyCurrentUser={likedPostId.includes(element.id)}\n                      layoutId=\"PostitModal\"\n                    />\n                  );\n                } else {\n                  return (\n                    <PostIt\n                      key={element.id}\n                      postObj={element}\n                      isOwner={userObj.uid === element.author}\n                      uid={userObj.uid}\n                      isLikedbyCurrentUser={likedPostId.includes(element.id)}\n                    />\n                  );\n                }\n              })}\n          </PostGrid>\n        </div>\n      </AnimatePresence>\n    </>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  onSnapshot,\n  orderBy,\n  query,\n  where,\n} from \"firebase/firestore\";\nimport styled from \"styled-components\";\nimport { firestoreDB } from \"firebase\";\nimport PostIt from \"components/PostIt\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { deleteState, userState } from \"atoms\";\n\nconst PostGrid = styled.div`\n  display: grid;\n  position: relative;\n  min-height: 200px;\n  grid-template-columns: repeat(4, 1fr);\n`;\n\nconst WarningSign = styled.div`\n  font-size: 24px;\n  position: absolute;\n  display: flex;\n  left: -300px;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n  width: 300px;\n`;\n\nconst Profile = ({ userObj }) => {\n  const uId = userObj.uid;\n\n  const [postArry, setPostArry] = useState([]);\n  const [likedPostArry, setLikedPostArry] = useState([]);\n  const [isDeleted, setIsDeleted] = useRecoilState(deleteState);\n  const [likedPostId, setLikedPostId] = useState([]);\n  const userNickname = useRecoilValue(userState);\n\n  // 내가 쓴 글 불러오기\n  useEffect(() => {\n    const q = query(\n      collection(firestoreDB, \"Post\"),\n      where(\"author\", \"==\", uId),\n      orderBy(\"uploadedAt\", \"desc\")\n    );\n    const postSnapshot = onSnapshot(q, (snapshot) => {\n      const docArry = snapshot.docs.map((elem) => ({\n        id: elem.id,\n        ...elem.data(),\n      }));\n      setPostArry(docArry);\n    });\n  }, []);\n\n  useEffect(() => {\n    const qu = query(\n      collection(firestoreDB, \"UserInfo\"),\n      where(\"id\", \"==\", userObj.uid)\n    );\n    const userSnapshot = onSnapshot(qu, (snapshot) => {\n      const userInfoArry = snapshot.docs.map((elem) => ({\n        ...elem.data(),\n      }));\n      const { likePost } = userInfoArry[0];\n      setLikedPostId(likePost);\n    });\n  }, []);\n\n  // 내가 좋아요 누른 글 불러오기\n  useEffect(() => {\n    const q = query(\n      collection(firestoreDB, \"UserInfo\"),\n      where(\"id\", \"==\", uId)\n    );\n    const userSnapshot = onSnapshot(q, (snapshot) => {\n      const userInfoArry = snapshot.docs.map((elem) => ({\n        ...elem.data(),\n      }));\n      const { likePost } = userInfoArry[0];\n      // Promise.all()로 리펙토링 하기!!\n      // Promise.all(\n      //   likePost.map(async (e) => {\n      //     let likedpost = await getDoc(doc(firestoreDB, \"Post\", e));\n      //     setLikedPostArry((prev) => [...prev, likedpost.data()]);\n      //   })\n      // );\n      const result = Promise.allSettled(\n        likePost.map(async (e) => {\n          try {\n            let likedpost = await getDoc(doc(firestoreDB, \"Post\", e));\n            return likedpost.data();\n          } catch (error) {\n            console.log(error);\n          }\n        })\n      );\n      // setLikedPostArry(result);\n      result.then((r) => {\n        setLikedPostArry(r);\n      });\n    });\n  }, []);\n\n  return (\n    <>\n      <b style={{ marginLeft: 40, fontSize: \"20px\" }}>\n        {userNickname.nickname}님이 쓴 글 모아보기\n      </b>\n      <div className=\"flexContainer\">\n        <PostGrid>\n          {postArry.length == 0 ? (\n            <WarningSign>아직 쓴 글이 없어요</WarningSign>\n          ) : (\n            postArry.map((element) => (\n              <PostIt\n                key={element.id}\n                postObj={element}\n                isOwner={userObj.uid === element.author}\n                isLikedbyCurrentUser={likedPostId.includes(element.id)}\n              />\n            ))\n          )}\n        </PostGrid>\n      </div>\n      <b style={{ marginLeft: 40, fontSize: \"20px\" }}>\n        {userNickname.nickname}님이 좋아요 누른 글 모아보기\n      </b>\n      <div className=\"flexContainer\">\n        <PostGrid>\n          {likedPostArry.length === 0 ? (\n            <WarningSign>아직 좋아하는 글이 없어요</WarningSign>\n          ) : (\n            likedPostArry.map((element) => {\n              if (element.value !== undefined) {\n                return (\n                  <PostIt\n                    key={element.value.id}\n                    postObj={element.value}\n                    isOwner={userObj.uid === element.value.author}\n                    // isOwner={false}\n                    isLikedbyCurrentUser={true}\n                  />\n                );\n              }\n            })\n          )}\n        </PostGrid>\n      </div>\n    </>\n  );\n};\nexport default Profile;\n","import React, { useEffect, useState } from \"react\";\nimport { authService, firestoreDB } from \"firebase\";\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  GoogleAuthProvider,\n} from \"firebase/auth\";\nimport { useForm } from \"react-hook-form\";\nimport styled from \"styled-components\";\nimport { doc, setDoc } from \"firebase/firestore\";\n\nconst Wrapper = styled.div`\n  background-color: white;\n  height: 100vh;\n`;\n\nconst ButtonMenu = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  width: 400px;\n  gap: 30px;\n`;\n\nconst FormDiv = styled.div`\n  margin-top: 50px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\nconst Form = styled.form`\n  margin: 0 auto;\n  width: 100%;\n  max-width: 414px;\n  padding: 1.3rem;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\nconst Input = styled.input`\n  max-width: 100%;\n  padding: 11px 13px;\n  background: #f9f9fa;\n  color: #f03d4e;\n  margin-bottom: 0.9rem;\n  border-radius: 4px;\n  outline: 0;\n  border: 1px solid rgba(245, 245, 245, 0.7);\n  font-size: 14px;\n  transition: all 0.3s ease-out;\n  box-shadow: 0 0 3px rgba(0, 0, 0, 0.1), 0 1px 1px rgba(0, 0, 0, 0.1);\n  :focus,\n  :hover {\n    box-shadow: 0 0 3px rgba(0, 0, 0, 0.15), 0 1px 5px rgba(0, 0, 0, 0.1);\n  }\n`;\nconst SubmitButton = styled.button`\n  max-width: 100%;\n  padding: 11px 13px;\n  color: rgb(253, 249, 243);\n  font-weight: 600;\n  text-transform: uppercase;\n  background: #f03d4e;\n  border: none;\n  border-radius: 3px;\n  outline: 0;\n  cursor: pointer;\n  margin-top: 0.6rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease-out;\n  :hover {\n    background: rgb(200, 50, 70);\n    animation: 0.2s ease-out forwards;\n  }\n`;\n\nconst GoogleButton = styled.button`\n  max-width: 100%;\n  padding: 11px 13px;\n  color: rgb(253, 249, 243);\n  font-weight: 600;\n  text-transform: uppercase;\n  background: grey;\n  border: none;\n  border-radius: 3px;\n  outline: 0;\n  cursor: pointer;\n  margin-top: 0.6rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease-out;\n  :hover {\n    background: #3d3b3b;\n    animation: 0.2s ease-out forwards;\n  }\n`;\n\nconst AlterButton = styled.button`\n  max-width: 100%;\n  padding: 11px 13px;\n  color: black;\n  font-weight: 600;\n  text-transform: uppercase;\n  background: #e8dfdf;\n  border: none;\n  border-radius: 3px;\n  outline: 0;\n  cursor: pointer;\n  margin-top: 0.6rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease-out;\n  :hover {\n    background: #303030;\n    color: white;\n    animation: 0.2s ease-out forwards;\n  }\n`;\n\nconst Title = styled.h2`\n  text-align: center;\n  font-size: 38px;\n  margin-top: 30px;\n  margin-bottom: 20px;\n`;\n\nfunction Auth() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [nickname, setNickname] = useState(\"\");\n  const [newAccount, setNewAccout] = useState(true);\n  const [error, setError] = useState(\"\");\n  // const [userInfoState, setUserInfoState] = useRecoilState(userState);\n\n  const toggleAccount = () => setNewAccout((prev) => !prev);\n\n  const { register, handleSubmit } = useForm();\n\n  const onSubmit = async (data, e) => {\n    e.preventDefault();\n    try {\n      let authData;\n      if (newAccount) {\n        authData = await createUserWithEmailAndPassword(\n          authService,\n          email,\n          password\n        );\n        // console.log(authData);\n\n        // set User iInformation field\n        const userInfo = {\n          id: authData.user.uid,\n          nickname: data.nickname,\n          createdAt: Date.now(),\n          likePost: [],\n        };\n        const docRef = await setDoc(\n          doc(firestoreDB, \"UserInfo\", userInfo.id),\n          userInfo\n        );\n      } else {\n        authData = await signInWithEmailAndPassword(\n          authService,\n          email,\n          password\n        );\n      }\n    } catch (error) {\n      console.log(error.message);\n      setError(error.message);\n    }\n  };\n  const onGoogleClick = async () => {\n    const provider = new GoogleAuthProvider();\n    try {\n      const result = await signInWithPopup(authService, provider);\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      console.log(credential);\n      const token = credential.accessToken;\n      // The signed-in user info.\n      const user = result.user;\n\n      // set User iInformation field\n      const userInfo = {\n        id: user.uid,\n        nickname: \"Google_login_nickname\",\n        createdAt: Date.now(),\n        likePost: [],\n      };\n      const docRef = await setDoc(\n        doc(firestoreDB, \"UserInfo\", userInfo.id),\n        userInfo\n      );\n    } catch (error) {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n    }\n  };\n\n  useEffect(() => {\n    //localStorage로 로그인 관리하기?\n  }, []);\n\n  const onChange = (e) => {\n    //destructring event\n    const {\n      target: { name, value },\n    } = e;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n\n  return (\n    <Wrapper>\n      <Title>사용자 인증</Title>\n      <FormDiv>\n        <Form onSubmit={handleSubmit(onSubmit)}>\n          <Input\n            {...register(\"email\", {\n              required: true,\n              onChange: onChange,\n              value: email,\n            })}\n            type=\"email\"\n            id=\"id\"\n            placeholder=\"Email\"\n          ></Input>\n          <Input\n            {...register(\"password\", {\n              required: true,\n              onChange: onChange,\n              value: password,\n            })}\n            type=\"text\"\n            id=\"pw\"\n            placeholder=\"Password\"\n          ></Input>\n          {newAccount && (\n            <Input\n              {...register(\"nickname\", {\n                required: true,\n                onChange: onChange,\n                value: nickname,\n              })}\n              type=\"text\"\n              id=\"nickname\"\n              placeholder=\"Nickname\"\n            ></Input>\n          )}\n          <SubmitButton type=\"submit\">\n            {newAccount ? \"가입하기\" : \"로그인\"}\n          </SubmitButton>\n        </Form>\n        <ButtonMenu>\n          <div>\n            <GoogleButton onClick={onGoogleClick}>\n              Goolge 로그인 하기\n            </GoogleButton>\n            {/* <button>Github으로 로그인 하기</button> */}\n          </div>\n          <div>\n            <AlterButton onClick={toggleAccount}>\n              {newAccount ? \"이미 계정이 있어요\" : \"새롭게 계정을 생성해야해요\"}\n            </AlterButton>\n          </div>\n        </ButtonMenu>\n        {error}\n      </FormDiv>\n    </Wrapper>\n  );\n}\nexport default Auth;\n","import { userState } from \"atoms\";\nimport { authService, firestoreDB } from \"firebase\";\nimport { doc, updateDoc } from \"firebase/firestore\";\nimport React, { useState } from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { useRecoilState } from \"recoil\";\nimport { useForm } from \"react-hook-form\";\nimport styled from \"styled-components\";\n\nconst Nav = styled.nav`\n  margin: 30px;\n  display: flex;\n  gap: 20px;\n  height: 30px;\n  align-items: baseline;\n  background-color: white;\n\n  a {\n    text-decoration: none;\n    font-size: 12px;\n    color: black;\n    /* height: 50px; */\n\n    :first-child {\n      font-size: 24px;\n      background: linear-gradient(to right top, #ffd359 40%, #44ccff 70%);\n      -webkit-background-clip: text;\n      color: rgba(0, 0, 0, 0.14);\n    }\n  }\n`;\nconst Form = styled.form``;\nconst Input = styled.input`\n  padding: 11px 13px;\n  background: #f9f9fa;\n  color: #f03d4e;\n  margin-bottom: 0.9rem;\n  border-radius: 4px;\n  outline: 0;\n  border: 1px solid rgba(245, 245, 245, 0.7);\n  font-size: 14px;\n`;\n\nconst LogOutButton = styled.button`\n  position: absolute;\n  cursor: pointer;\n  right: 20px;\n  width: 50px;\n  border: none;\n  color: white;\n  background-color: grey;\n  padding: 5px;\n  font-size: 10px;\n  border-radius: 10px;\n  margin: 10px;\n  font-family: \"SpoqaHanSansNeo\";\n  transition: all 0.3s ease-out;\n  :hover {\n    background: #303030;\n    color: white;\n    animation: 0.2s ease-out forwards;\n  }\n`;\n\nconst ChangeProfileButton = styled.button`\n  background-color: rgba(123, 227, 111, 1);\n  border-radius: 5px;\n  border: none;\n  color: white;\n  height: 1.8rem;\n  font-family: \"SpoqaHanSansNeo\";\n  transition: all 0.3s ease-out;\n  :hover {\n    background: #303030;\n    color: white;\n    animation: 0.2s ease-out forwards;\n  }\n`;\n\nconst Navigation = () => {\n  const history = useHistory();\n  const profileMatch = useRouteMatch(\"/profile\");\n  const [formCliked, setFormClicked] = useState(false);\n  const [userInfoState, setUserInfoState] = useRecoilState(userState);\n\n  const { register, handleSubmit } = useForm();\n\n  const onLogOutClick = () => {\n    authService.signOut();\n    history.push(\"/\");\n  };\n\n  const onFormClick = () => {\n    setFormClicked((prev) => !prev);\n  };\n\n  const changeNickname = async (data, e) => {\n    e.preventDefault();\n    const userInfo = await doc(firestoreDB, \"UserInfo\", userInfoState.id);\n    //form으로 닉네임 받기\n    await updateDoc(userInfo, {\n      nickname: data.nickname,\n    });\n    setUserInfoState({ id: userInfoState.id, nickname: data.nickname });\n    setFormClicked(false);\n  };\n\n  return (\n    <Nav isProfile={profileMatch}>\n      <Link to={\"/\"}>Post It Board</Link>\n\n      <Link\n        style={{\n          textDecoration: profileMatch ? \"underline\" : \"none\",\n        }}\n        to={\"/profile\"}\n      >\n        {userInfoState.nickname}'s profile\n      </Link>\n\n      {profileMatch && (\n        <ChangeProfileButton onClick={onFormClick}>\n          별명 수정하기\n        </ChangeProfileButton>\n      )}\n      {profileMatch && formCliked && (\n        <Form onSubmit={handleSubmit(changeNickname)}>\n          <Input\n            {...register(\"nickname\", {\n              required: true,\n            })}\n            id=\"change-nickname\"\n            placeholder=\"Change Nickname\"\n          ></Input>\n        </Form>\n      )}\n\n      <LogOutButton onClick={onLogOutClick}>Log Out</LogOutButton>\n    </Nav>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Auth from \"./routes/Auth\";\nimport Navigation from \"./components/Navigation\";\n\nconst AppRouter = ({ isLoggedin, userObj }) => {\n  return (\n    <Router>\n      {isLoggedin && <Navigation />}\n      <Switch>\n        {/* 로그인 정보를 받아서 null이 아니면 Auth 화면으로 처리해줌 */}\n        {isLoggedin ? (\n          <>\n            <Route exact path=\"/\">\n              <Home userObj={userObj} />\n            </Route>\n            <Route path={[\"/profile\"]}>\n              <Profile userObj={userObj} />\n            </Route>\n          </>\n        ) : (\n          <>\n            <Route exact path=\"/\">\n              <Auth />\n            </Route>\n          </>\n        )}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import AppRouter from \"AppRouter\";\nimport React, { useState, useEffect } from \"react\";\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedin, setLoggedin] = useState(true);\n  const [userObj, setUserObj] = useState(null);\n  // const [userId, setUserId] = useRecoilState(userIdState);\n\n  useEffect(() => {\n    let auth = getAuth();\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        console.log(\"settimeout login\", user);\n        setLoggedin(true);\n        setUserObj(user);\n        console.log(init, user);\n        setInit(true);\n      } else {\n        setLoggedin(false);\n        setInit(true);\n      }\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {init ? (\n        <AppRouter isLoggedin={isLoggedin} userObj={userObj} />\n      ) : (\n        \"로그인 정보 불러오는 중...\"\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport firebase from \"firebase\";\nimport { RecoilRoot } from \"recoil\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n      </BrowserRouter>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}